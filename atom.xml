<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://tdyj.github.io/atom.xml" rel="self"/>
  
  <link href="https://tdyj.github.io/"/>
  <updated>2022-10-12T04:15:06.829Z</updated>
  <id>https://tdyj.github.io/</id>
  
  <author>
    <name>Tdyj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ClassLoader学习记录</title>
    <link href="https://tdyj.github.io/2022/10/12/ClassLoader/"/>
    <id>https://tdyj.github.io/2022/10/12/ClassLoader/</id>
    <published>2022-10-12T02:23:24.000Z</published>
    <updated>2022-10-12T04:15:06.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ClassLoader-学习笔记"><a href="#ClassLoader-学习笔记" class="headerlink" title="ClassLoader 学习笔记"></a>ClassLoader 学习笔记</h1><p><code>Java</code>语言是一种具有动态性的解释性语言，类（<code>class</code>）只有被加载到<code>JVM</code>中才能运行。<code>JVM</code>会将编译生成的<code>.class</code>文件加载到内存中，并组织成为一个完整的<code>Java</code>程序。这个加载过程则是由类加载器（<code>ClassLoader</code>和它的子类）来完成的，其实质是把类文件从硬盘读到内存中。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java类加载器（Java Classloader）是Java运行时环境（Java Runtime Environment）的一部分，负责动态加载<code>class</code>文件到<code>JVM</code>的内存空间中，用于加载系统、网络或其他来源的类文件。Java源代码通过<code>javac</code>指令编译为<code>.class</code>的字节码文件，再由<code>JVM</code>执行。</p><h2 id="Java类加载方式"><a href="#Java类加载方式" class="headerlink" title="Java类加载方式"></a>Java类加载方式</h2><p>Java中类的加载是动态的，JVM启动的时候，不会一次性加载所有的class文件，而是先把保证程序能运行的基类先加载到JVM中，其他类则是再需要时再加载，这样就加快了加载速度，而且节约了程序运行过程中内存的开销。</p><p>类的加载方式分为:</p><ul><li><p><strong>隐式加载</strong>：程序使用<code>new</code>或<code>类名.方法名()</code>等方式创建对象，会隐式的调用类加载器</p></li><li><p><strong>显式加载</strong>：通过<code>Java反射</code>或者<code>ClassLoader</code>来动态加载一个类对象。如调用<code>Class.forName()</code>方法。</p></li></ul><p><strong>显式加载</strong>也可以理解为类动态加载，我们可以自定义类加载器去加载任意的类。</p><p>常用的类动态加载方式有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射加载HelloWorld示例</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.tdyj.sec.HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Classloader 加载HelloWorld示例</span></span><br><span class="line"><span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;com.tdyj.sec.HelloWorld&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Java类加载器分类"><a href="#Java类加载器分类" class="headerlink" title="Java类加载器分类"></a>Java类加载器分类</h2><p>类加载器大致分为两种，一种是<code>JVM</code>自带的类加载器，，另一种就是用户自定义类加载器。</p><h3 id="JVM默认类加载器"><a href="#JVM默认类加载器" class="headerlink" title="JVM默认类加载器"></a>JVM默认类加载器</h3><p>JVM默认类加载器分为一下三种：</p><ul><li><p><strong>引导类加载器（Bootstrap ClassLoader）：</strong> 主要加载核心类库，<code>%JRE_HOME%/lib</code>下的rt.jar、resources.jar、charsets.jar和class等。它的底层原生代码是C++语言编写，属于jvm一部分，不继承<code>java.lang.ClassLoader</code>类，也没有父加载器，所以在尝试获取被Bootstrap ClassLoader类加载器所加载的类的ClassLoader时候都会返回null。另外需要注意的是可以通过启动jvm时指定-Xbootclasspath和路径来改变Bootstrap ClassLoader的加载目录。</p></li><li><p><strong>扩展类加载器（Extention ClassLoader）：</strong> 加载目录<code>%JRE_HOME%\lib\ext</code>目录下的jar包和class文件。还可以加载<code>-D java.ext.dirs</code>选项指定的目录。由<code>sun.misc.Launcher$ExtClassLoader</code>类实现，父加载器为null。</p></li><li><p><strong>系统类加载器（App ClassLoader）：</strong> 加载ClassPath所指定的类，如果没有特别指定，则用户自定义的类加载器都以此类加载器作为父加载器,由<code>sun.misc.Launcher$AppClassLoader</code>实现，父加载器为<code>ExtClassLoader</code>。</p></li></ul><h3 id="自定义类加载器（Custom-ClassLoader）"><a href="#自定义类加载器（Custom-ClassLoader）" class="headerlink" title="自定义类加载器（Custom ClassLoader）"></a>自定义类加载器（Custom ClassLoader）</h3><p><code>JVM</code>默认类加载器只是加载指定路径下的jar包或资源，如果我们需要从其它文件夹或是网络加载class文件，则可以通过继承<code>java.lang.ClassLoader</code>自定义一个classloader。详情留到后面讲解。</p><h2 id="Java类加载流程"><a href="#Java类加载流程" class="headerlink" title="Java类加载流程"></a>Java类加载流程</h2><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BootStrap ClassLoader =&gt; Extention ClassLoader =&gt; AppClassLoader</span><br></pre></td></tr></table></figure><p>查看<code>sun.misc.Launcher</code>，它是一个java虚拟机的入口应用，初始化了ExtClassLoader和AppClassLoader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Launcher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Launcher</span> <span class="variable">launcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Launcher</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">bootClassPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;sun.boot.class.path&quot;</span>);        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Launcher <span class="title function_">getLauncher</span><span class="params">()</span> &#123;        <span class="keyword">return</span> launcher;    &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>这里的<code>bootClassPath</code>即为BootstrapClassLoader加载的jar包路径。这里可以打印bootClassPath的值，查看其加载的路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(<span class="string">&quot;sun.boot.class.path&quot;</span>));</span><br></pre></td></tr></table></figure><p>得到的结果如下所示，均为JRE目录下的jar包或class文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">F:\Java\JDK\jre\lib\resources.jar;</span><br><span class="line">F:\Java\JDK\jre\lib\rt.jar;</span><br><span class="line">F:\Java\JDK\jre\lib\sunrsasign.jar;</span><br><span class="line">F:\Java\JDK\jre\lib\jsse.jar;</span><br><span class="line">F:\Java\JDK\jre\lib\jce.jar;</span><br><span class="line">F:\Java\JDK\jre\lib\charsets.jar;</span><br><span class="line">F:\Java\JDK\jre\lib\jfr.jar;</span><br><span class="line">F:\Java\JDK\jre\classes</span><br></pre></td></tr></table></figure><p>接下来查看ExtCLassLoader部分源码，其中getExtDirs包含熟悉的字符串<code>java.ext.dirs</code>。3.1章节中提到过，可通过<code>-Djava.ext.dirs</code>添加或改变ExtClassLoader的加载路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> File[] getExtDirs() &#123;</span><br><span class="line">        File[] arrayOfFile;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>);</span><br></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>));</span><br></pre></td></tr></table></figure><p>结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\java\JRE\lib\ext;</span><br><span class="line">C:\WINDOWS\Sun\Java\lib\ext</span><br></pre></td></tr></table></figure><p>通过-Djava.ext.dits启动命令修改路径，</p><img src="https://raw.githubusercontent.com/tdyj/picture/main/img/202210121214346.png" alt="1" style="zoom:150%;" /><p>AppClassLoader部分源码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title function_">getAppClassLoader</span><span class="params">(<span class="keyword">final</span> ClassLoader extcl)</span> <span class="keyword">throws</span> </span><br><span class="line">IOException &#123;    </span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.class.path&quot;</span>);    </span><br><span class="line"><span class="keyword">final</span> File[] path = (str == <span class="literal">null</span>) ? <span class="keyword">new</span> <span class="title class_">File</span>[<span class="number">0</span>] : </span><br><span class="line">Launcher.getClassPath(str);</span><br></pre></td></tr></table></figure><p>可以看到AppClassLoader加载的就是<code>java.class.path</code>下的路径，同样打印其值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br></pre></td></tr></table></figure><p>结果如下所示，很明显就是我们配置的环境变量CLASSPATH的值，前面的”.”代表当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;F:\java\JDK\lib;F:\java\JDK\lib\tools.jar</span><br></pre></td></tr></table></figure><h3 id="父加载器"><a href="#父加载器" class="headerlink" title="父加载器"></a>父加载器</h3><p>每个类加载器都有一个父加载器，可以通过getParent方法获取。<strong>注意父加载器不是父类。</strong></p><p>首先查看类的继承关系：</p><img src="https://raw.githubusercontent.com/tdyj/picture/main/img/202210121214974.png" alt="2"  /><p>getParent方法在ClassLoader.java当中可以找到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ClassLoader <span class="title function_">getParent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Check access to the parent class loader</span></span><br><span class="line">        <span class="comment">// If the caller&#x27;s class loader is same as this class loader,</span></span><br><span class="line">        <span class="comment">// permission check is performed.</span></span><br><span class="line">        checkClassLoaderPermission(parent, Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的parent是一个classloader对象，parent的赋值在classloader的构造方法当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassLoader.java部分源码</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">ClassLoader</span><span class="params">(ClassLoader parent)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(checkCreateClassLoader(), parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">ClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(checkCreateClassLoader(), getSystemClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title function_">getSystemClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">    initSystemClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (scl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">initSystemClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sclSet) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scl != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;recursive invocation&quot;</span>);</span><br><span class="line">        sun.misc.<span class="type">Launcher</span> <span class="variable">l</span> <span class="operator">=</span> sun.misc.Launcher.getLauncher();</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">oops</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//通过launch获取classloader</span></span><br><span class="line">            scl = l.getClassLoader();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                scl = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">SystemClassLoaderAction</span>(scl));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                oops = pae.getCause();</span><br><span class="line">                <span class="keyword">if</span> (oops <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">                    oops = oops.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (oops != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oops <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (Error) oops;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// wrap the exception</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(oops);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sclSet = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sun.misc.Launcher部分源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Launcher</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Launcher</span> <span class="variable">launcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Launcher</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Launcher <span class="title function_">getLauncher</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> launcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader loader;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> URLStreamHandler fileHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Launcher</span><span class="params">()</span> &#123;</span><br><span class="line">    ExtClassLoader extClassLoader;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        extClassLoader = ExtClassLoader.getExtClassLoader();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(<span class="string">&quot;Could not create extension class loader&quot;</span>, iOException);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loader = AppClassLoader.getAppClassLoader(extClassLoader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(<span class="string">&quot;Could not create application class loader&quot;</span>, iOException);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>查看代码发现，parent的值有两种情况：</p><ul><li><p>在创建ClassLoader时直接指定parent</p></li><li><p>通过<code>getSystemClassLoader()</code>方法生成，也就是在<code>sun.misc.Launcher</code>通过<code>getClassLoader()</code>获取。跟进源码发现就是AppClassLoader。换言之，如果创建ClassLoader时没有指定parent，那么parent默认就是AppClassLoader。</p></li></ul><p>现在回到父加载器当中来，上面粘贴的部分Launcher代码，有如下几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExtClassLoader extClassLoader;</span><br><span class="line">extClassLoader = ExtClassLoader.getExtClassLoader();</span><br><span class="line"><span class="built_in">this</span>.loader = AppClassLoader.getAppClassLoader(extClassLoader);</span><br></pre></td></tr></table></figure><p>这里创建AppClassLoader时传入了ExtClassLoader实例，满足以上第一种情况，所有说AppClassLoader的父加载器就是ExtClassLoader。</p><p>ExtClassLoader并没有直接找到对parent的赋值。它调用了它的父类也就是URLClassLoder的构造方法并传递了3个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ExtClassLoader</span><span class="params">(File[] param1ArrayOfFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">super</span>(getExtURLs(param1ArrayOfFile), (ClassLoader)<span class="literal">null</span>, Launcher.factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">URLClassLoader</span><span class="params">(URL[] urls, ClassLoader parent,</span></span><br><span class="line"><span class="params">                      URLStreamHandlerFactory factory)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，ExtClassLoader的parent为null。当 parent 字段是 null 时就表示它的父加载器是「引导类(根)加载器」。如果某个 Class 对象的 classLoader 属性值是 null，那么就表示这个类也是「引导类(根)加载器」加载的。</p><h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><h4 id="类加载机制分类"><a href="#类加载机制分类" class="headerlink" title="类加载机制分类"></a>类加载机制分类</h4><p><code>JVM</code>类加载机制主要有如下3种：</p><ul><li><p><strong>全盘负责</strong>：当一个类加载器负责加载某个类时，该类所依赖和引用的其他类也将由该类加载器负责载入，除非显式的使用了另一个ClassLoader。</p></li><li><p><strong>双亲委派</strong>：当一个类加载器收到类加载的请求时，它并不会自己先去尝试加载这个类，而是把这个请求委托给父加载器去完成，如果父加载器还存在父加载器，则进一步向上委托，依次递归。因此，所有的类加载请求最终将被传递给顶层的引导类加载器中，只有当父加载器无法加载时，子加载器才会尝试去加载该类。</p></li><li><p><strong>缓存机制</strong>：缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效。</p></li></ul><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>一个类加载器查找class和resource时，是通过“委托模式”进行的，它首先判断这个class是不是已经加载成功，如果没有的话它并不是自己进行查找，而是先通过父加载器，然后递归下去，直到Bootstrap ClassLoader，如果Bootstrap classloader找到了，直接返回，如果没有找到，则一级一级返回，最后到达自身去查找这些对象。这种机制就叫做双亲委托。</p><p><strong>双亲委派流程图如下所示：</strong></p><p><img src="https://raw.githubusercontent.com/tdyj/picture/main/img/202210121214924.png" alt="3"></p><p><strong>用文字描述一下：</strong></p><ol><li><p>Custom ClassLoader加载某个class时，首先从缓存区寻找该class,缓存有则从缓存中获取，否则委派给父加载器。</p></li><li><p>父加载器AppClassLoader执行同样的操作，首先从缓存区查找，否则委托给父加载器。</p></li><li><p>如果ExtClassLoader也没有加载过，则由Bootstrap ClassLoader出面，首先查找缓存，如果没有找到，则去自己规定的加载路径查找，即<code>sun.boot.class.path</code>对应的路径。找到就返回，没找到则向下由子加载器找。</p></li><li><p>Bootstrap ClassLoader查找失败，则ExtClassLoader在自己<code>java.ext.dirs</code>路径中查找，同样找到就返回，否则接着由子加载器找。</p></li><li><p>ExtClassLoader查找失败，则AppClassLoader在<code>java.class.path</code>路径下查找，找到就返回，否则由子加载器找。</p></li><li><p>AppClassLoader查找失败，则Custom ClassLoader调用自身<code>findClass()</code>方法进行查找。(如果当前ClassLoader没有重写<code>findClass()</code>方法，则类加载失败，抛出异常<code>ClassNotFoundException</code>；如果通过重写的<code>findClass()</code>方法找到了对应的类字节码，则调用<code>defineClass</code>方法去JVM中注册该类，并返回一个被JVM加载后的<code>java.lang.Class</code>类对象。)</p></li></ol><p><strong>双亲委派优点：</strong></p><ul><li><p><strong>避免类的重复加载</strong>。Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层次关系可避免类的重复加载，当父加载器已加载该类时，就没有必要让子加载器再一次加载。</p></li><li><p><strong>保证Java核心API库安全</strong>。假设通过网络传递一个名为<code>java.lang.Integer</code>的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心<code>Java API</code>发现这个名字的类，发现该类已被加载，于是就不会重新加载网络传递过来的<code>java.lang.Integer</code>，而直接返回已加载过的<code>Integer.class</code>，这样便可以防止核心<code>API</code>库被随意篡改。</p></li></ul><h4 id="JVM在搜索类的时候，如何判定两个class是相同的"><a href="#JVM在搜索类的时候，如何判定两个class是相同的" class="headerlink" title="JVM在搜索类的时候，如何判定两个class是相同的"></a>JVM在搜索类的时候，如何判定两个class是相同的</h4><p>JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//type TestSimple.java  编译后放入D盘路径下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSimple</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;classloader test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//type Test.java</span></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&quot;file:D:\\&quot;</span>;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(dir)&#125;);</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(dir)&#125;);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; simpleClass1 = v1.loadClass(<span class="string">&quot;TestSimple&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">simple1</span> <span class="operator">=</span> simpleClass1.getConstructor().newInstance();</span><br><span class="line">        simpleClass1.getMethod(<span class="string">&quot;print&quot;</span>).invoke(simple1);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; simpleClass2 = v2.loadClass(<span class="string">&quot;TestSimple&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">simple2</span> <span class="operator">=</span> simpleClass2.getConstructor().newInstance();</span><br><span class="line">        simpleClass2.getMethod(<span class="string">&quot;print&quot;</span>).invoke(simple2);</span><br><span class="line"></span><br><span class="line">        System.out.println(simpleClass1.equals(simpleClass2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F:\code\java&gt;java Test</span><br><span class="line">classloader test</span><br><span class="line">classloader test</span><br><span class="line">false</span><br><span class="line">注意： 这里须确保testSimple字节码不在classpath中，否则会因双亲委派机制，而通过AppClassLoader进行加载，由于使用的都是AppClassLoader，所以最后输出会为true</span><br></pre></td></tr></table></figure><h4 id="ClassLoader类核心方法"><a href="#ClassLoader类核心方法" class="headerlink" title="ClassLoader类核心方法"></a>ClassLoader类核心方法</h4><p><code>ClassLoader</code>类有如下核心方法：</p><ol><li><strong>loadClass()：</strong> 加载指定的Java类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">​```java</span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(name, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用同名方法loadClass(String,boolen)，源码如下</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现了以下步骤：</p><ul><li><p>执行<code>findLoadedClass(String)</code>检查这个class是否已经加载过。</p></li><li><p>执行父加载器的<code>loadClass</code>方法。如果父加载器为null，则使用jvm内置加载器替代，即Bootstrap ClassLoader。这也解释了ExtClassLoader的parent为null，却说Bootstrap ClassLoader是它的父加载器。</p></li><li><p>如果父加载器没有加载成功，则通过自身的<code>findClass(String)</code>查找。</p></li><li><p>如果当前的ClassLoader没有重写findClass方法，那么直接返回类加载失败异常。如果当前类重写了findClass方法，那么应该调用defineClass方法去JVM中注册该类。</p></li><li><p>如果调用loadClass的时候传入的resolve参数为true，那么还需要调用resolveClass方法链接类，默认为false。</p></li><li><p>返回一个被JVM加载后的java.lang.Class类对象。</p></li></ul><p>代码解释了双亲委派。另外，官方注释里提到，编写ClassLoader的子类，建议覆盖<code>findClass()</code>方法，不要覆盖<code>loadClass()</code>方法。</p><ol start="2"><li><strong>findClass()：</strong> 查找指定的Java类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>findLoadedClass()：</strong> 查找JVM已经加载过的指定类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; findLoadedClass(String name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!checkName(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> findLoadedClass0(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">final</span> Class&lt;?&gt; findLoadedClass0(String name);</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>defindeClass()：</strong> 定义一个Java类，将字节码解析成JVM识别的Class对象。通常和findClass()方法配合使用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span><br><span class="line">        <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, off, len, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>resolveClass()：</strong> 链接指定的Java类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">resolveClass</span><span class="params">(Class&lt;?&gt; c)</span> &#123;</span><br><span class="line">    resolveClass0(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">resolveClass0</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br></pre></td></tr></table></figure><h4 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h4><p>如果我们需要动态从某个文件夹加载一个class文件，或者从网络上下载class然后再进行加载，就需要自定义一个classloader。利用自定义类加载器我们可以在webshell中实现加载并调用自己编译的类对象，比如本地命令执行漏洞调用自定义类字节码的native方法绕过RASP检测，也可以用于加密重要的Java类字节码等。</p><p>自定义ClassLoader步骤：</p><ol><li><p>继承ClassLoader类</p></li><li><p>重写<code>findClass()</code>方法</p></li><li><p>在<code>findClass()</code>方法中调用<code>defineClass()</code>方法</p></li></ol><p>下面以自定义ClassLoader类来加载字节码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HelloWorld.java 测试类</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//GetHelloWorldBytes.java  获取HelloWorld类字节码数组</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetHelloWorldBytes</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\code\\javasec\\src\\Test\\HelloWorld.class&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span> bytes[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((a = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(bytes,<span class="number">0</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//TestClassLoader自定义类加载器，加载自定义字节码并调用其hello方法</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="comment">// HelloWorld类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">testClassName</span> <span class="operator">=</span> <span class="string">&quot;Test.HelloWorld&quot;</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>,</span><br><span class="line">            <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>,</span><br><span class="line">            <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>,</span><br><span class="line">            <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>,</span><br><span class="line">            <span class="number">108</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>,</span><br><span class="line">            <span class="number">47</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>,</span><br><span class="line">            <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理HelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName))&#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName,testClassBytes,<span class="number">0</span>,testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义类加载器</span></span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 使用自定义类加载器加载HelloWorld类</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">testClass</span> <span class="operator">=</span> loader.loadClass(testClassName);</span><br><span class="line">            <span class="comment">// 反射创建HelloWorld类 等价于 HelloWorld helloWorld = new HelloWorld()</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">testInstance</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line">            <span class="comment">// 反射获取hello方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="comment">// 反射调用hello方法</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> (String) method.invoke(testInstance);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">            <span class="comment">// 获取类加载器</span></span><br><span class="line">            System.out.println(testInstance.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里前两个类仅用来获取字节码数组，拿到字节码后可将其删除，编译运行<strong>TestClassLoader</strong>类，其返回结果如下所示：</p><p><img src="https://raw.githubusercontent.com/tdyj/picture/main/img/202210121214126.png" alt="4"></p><p>注意，要删除HelloWorld.class，否则因双亲委派机制，第二行打印的将是AppClassLoader。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在安全领域当中，我们往往会使用其ClassLoader特性，自定义恶意的类加载webshell利用以及自定以类字节码的native方法绕过RASP检测。所以了解ClassLoader特性并进行自定义编写，对我们了解Java安全机制十分重要。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>初学Java,这些概念性的东西比较难于理解，记录仅是便于自己后续复习，后续如发现有错，再回来修改。参考文章：</p><ol><li><p><a href="https://cloud.tencent.com/developer/article/1383145">https://cloud.tencent.com/developer/article/1383145</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/51374915">https://zhuanlan.zhihu.com/p/51374915</a></p></li><li><p><a href="https://xz.aliyun.com/t/9002#toc-20">https://xz.aliyun.com/t/9002#toc-20</a></p></li><li><p><a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html#%E5%88%9D%E5%A7%8B%E5%8C%96">https://pdai.tech/md/java/jvm/java-jvm-classload.html#%E5%88%9D%E5%A7%8B%E5%8C%96</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ClassLoader-学习笔记&quot;&gt;&lt;a href=&quot;#ClassLoader-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ClassLoader 学习笔记&quot;&gt;&lt;/a&gt;ClassLoader 学习笔记&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Java&lt;/co</summary>
      
    
    
    
    <category term="Java基础" scheme="https://tdyj.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://tdyj.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
